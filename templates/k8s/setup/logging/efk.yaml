---
apiVersion: v1
kind: Namespace
metadata:
  name: {{.Namespace}}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: fluent-bit
  name: fluent-bit
  namespace: {{.Namespace}}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fluent-bit
  namespace: {{.Namespace}}
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: fluent-bit
roleRef:
  kind: ClusterRole
  name: fluent-bit
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: fluent-bit
  namespace: {{.Namespace}}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config
  namespace: {{.Namespace}}
  labels:
    app: fluent-bit
data:
  fluent-bit.conf: |-
    [SERVICE]
        Flush        1
        Daemon       Off
        Log_Level    info
        Parsers_File parsers.conf
    [INPUT]
        Name             tail
        Path             /var/log/containers/*.log
        Parser           docker
        Tag              kube.*
        Refresh_Interval 5
        Mem_Buf_Limit    50MB
        Skip_Long_Lines  On
    [INPUT]
        Name             tail
        Path             /var/log/k8s-tew/*.log
        Parser           syslog
        Tag              k8s-tew.*
        Refresh_Interval 5
        Mem_Buf_Limit    50MB
        Skip_Long_Lines  On
    [FILTER]
        Name                kubernetes
        Match               kube.*
        Kube_URL            https://kubernetes.default.svc:443
        Kube_CA_File        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        Kube_Token_File     /var/run/secrets/kubernetes.io/serviceaccount/token
        tls.verify off
        tls.debug 1
    [OUTPUT]
        Name  es
        Match *
        Host  elasticsearch
        Port  9200
        Logstash_Format On
        Retry_Limit False
        Type  flb_type
        Logstash_Prefix kubernetes_cluster
        HTTP_User       ${ELASTICSEARCH_USERNAME}
        HTTP_Passwd     ${ELASTICSEARCH_PASSWORD}
        tls on
        tls.verify on
        tls.ca_file /ca.pem
        tls.crt_file /elasticsearch.pem
        tls.key_file /elasticsearch-key.pem
        tls.debug 1
  parsers.conf: |-
    [PARSER]
        Name        syslog
        Format      regex
        Regex       ^\<(?<pri>[0-9]+)\>(?<time>[^ ]* {1,2}[^ ]* [^ ]*) (?<host>[^ ]*) (?<ident>[a-zA-Z0-9_\/\.\-]*)(?:\[(?<pid>[0-9]+)\])?(?:[^\:]*\:)? *(?<message>.*)$
        Time_Key    time
        Time_Format %b %d %H:%M:%S
    [PARSER]
        Name        docker
        Format      json
        Time_Key    time
        Time_Format %Y-%m-%dT%H:%M:%S.%L
        Time_Keep   On

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-config
  namespace: {{.Namespace}}
  labels:
    app: elasticsearch
data:
  elasticsearch.yml: |-
    cluster.name: "k8s-tew"
    network.host: 0.0.0.0
    discovery.seed_hosts: "{{ range $index, $element := .ElasticsearchCounts }}{{ if $index }},{{ end }}elasticsearch-{{ $element }}.elasticsearch{{ end }}"
    cluster.initial_master_nodes: "{{ range $index, $element := .ElasticsearchCounts }}{{ if $index }},{{ end }}elasticsearch-{{ $element }}{{ end }}"
    xpack.license.self_generated.type: basic
    xpack.security.enabled: true
    xpack.security.transport.ssl.enabled: true
    xpack.security.transport.ssl.verification_mode: "certificate"
    xpack.security.transport.ssl.key: "/usr/share/elasticsearch/config/certs/elasticsearch-key.pem"
    xpack.security.transport.ssl.certificate: "/usr/share/elasticsearch/config/certs/elasticsearch.pem"
    xpack.security.transport.ssl.certificate_authorities: [ "/usr/share/elasticsearch/config/certs/ca.pem" ]
    xpack.security.http.ssl.enabled: true
    xpack.security.http.ssl.key: "/usr/share/elasticsearch/config/certs/elasticsearch-key.pem"
    xpack.security.http.ssl.certificate: "/usr/share/elasticsearch/config/certs/elasticsearch.pem"
    xpack.security.http.ssl.certificate_authorities: [ "/usr/share/elasticsearch/config/certs/ca.pem" ]

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kibana-config
  namespace: {{.Namespace}}
  labels:
    app: kibana
data:
  kibana.yml: |-
    server.name: "kibana"
    server.host: 0.0.0.0
    xpack.reporting.capture.browser.chromium.disableSandbox: true
    elasticsearch.hosts: [ "https://elasticsearch:9200" ]
    server.ssl.enabled: true
    server.ssl.key: "/usr/share/kibana/config/certs/elasticsearch-key.pem"
    server.ssl.certificate: "/usr/share/kibana/config/certs/elasticsearch.pem"
    elasticsearch.ssl.certificateAuthorities: [ "/usr/share/kibana/config/certs/ca.pem" ]
    elasticsearch.ssl.verificationMode: "certificate"

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluent-bit
  namespace: {{.Namespace}}
  labels:
    app: fluent-bit
spec:
  selector:
    matchLabels:
      app: fluent-bit
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: fluent-bit
    spec:
      serviceAccountName: fluent-bit
      containers:
      - name: fluent-bit
        image: "{{.FluentBitImage}}"
        resources:
          limits:
            memory: 300Mi
          requests:
            cpu: 100m
            memory: 300Mi
        env:
          - name: ELASTICSEARCH_USERNAME
            valueFrom:
              secretKeyRef:
                name: elasticsearch-credentials
                key: username
          - name: ELASTICSEARCH_PASSWORD
            valueFrom:
              secretKeyRef:
                name: elasticsearch-credentials
                key: password
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: varlogk8stew
          mountPath: /var/log/k8s-tew
        - name: varlogcontainers
          mountPath: /var/log/containers
          readOnly: true
        - name: config
          mountPath: /fluent-bit/etc/fluent-bit.conf
          subPath: fluent-bit.conf
        - name: certificates
          mountPath: /ca.pem
          subPath: ca.pem
        - name: certificates
          mountPath: /elasticsearch.pem
          subPath: elasticsearch.pem
        - name: certificates
          mountPath: /elasticsearch-key.pem
          subPath: elasticsearch-key.pem
      terminationGracePeriodSeconds: 10
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
      volumes:
      - name: certificates
        configMap:
          name: elasticsearch-certificates
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlogk8stew
        hostPath:
          path: /var/log/k8s-tew
      - name: varlogcontainers
        hostPath:
          path: /var/log/containers
      - name: config
        configMap:
          name: fluent-bit-config

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{.Namespace}}
  name: cerebro
  labels:
    app: cerebro
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cerebro
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: cerebro
    spec:
      containers:
      - name: cerebro
        command:
        - sh
        - -c
        - "openssl pkcs12 -export -in /elasticsearch.pem -inkey /elasticsearch-key.pem -CAfile /ca.pem -out /tmp/keystore.p12 -passout pass: && bin/cerebro -Dconfig.file=/usr/local/cerebro/cfg/application.conf"
        env:
          - name: ELASTICSEARCH_USERNAME
            valueFrom:
              secretKeyRef:
                name: elasticsearch-credentials
                key: username
          - name: ELASTICSEARCH_PASSWORD
            valueFrom:
              secretKeyRef:
                name: elasticsearch-credentials
                key: password
          - name: APPLICATION_SECRET
            valueFrom:
              secretKeyRef:
                name: cerebro-credentials
                key: secret
          - name: BASIC_AUTH_USER
            valueFrom:
              secretKeyRef:
                name: cerebro-credentials
                key: username
          - name: BASIC_AUTH_PWD
            valueFrom:
              secretKeyRef:
                name: cerebro-credentials
                key: password
        imagePullPolicy: IfNotPresent
        image: "{{.CerebroImage}}"
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /#/connect
            port: 9000
            scheme: HTTPS
          initialDelaySeconds: 1
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 30
        readinessProbe:
          failureThreshold: 10
          httpGet:
            path: /#/connect
            port: 9000
            scheme: HTTPS
          initialDelaySeconds: 1
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 30
        ports:
        - containerPort: 9000
          name: https
          protocol: TCP
        resources: {}
        volumeMounts:
        - mountPath: /usr/local/cerebro/cfg
          name: cerebro
        - name: certificates
          mountPath: /ca.pem
          subPath: ca.pem
        - name: certificates
          mountPath: /elasticsearch.pem
          subPath: elasticsearch.pem
        - name: certificates
          mountPath: /elasticsearch-key.pem
          subPath: elasticsearch-key.pem
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: cerebro
        configMap:
          defaultMode: 420
          name: cerebro
      - name: certificates
        configMap:
          name: elasticsearch-certificates
        
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{.Namespace}}
  name: kibana
  labels:
    app: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: kibana
    spec:
      containers:
      - name: kibana
        image: "{{.KibanaImage}}"
        imagePullPolicy: IfNotPresent
        env:
          - name: ELASTICSEARCH_USERNAME
            valueFrom:
              secretKeyRef:
                name: elasticsearch-credentials
                key: username
          - name: ELASTICSEARCH_PASSWORD
            valueFrom:
              secretKeyRef:
                name: elasticsearch-credentials
                key: password
        ports:
        - containerPort: 5601
          name: http
          protocol: TCP
        volumeMounts:
        - name: certificates
          mountPath: /usr/share/kibana/config/certs/ca.pem
          subPath: ca.pem
        - name: certificates
          mountPath: /usr/share/kibana/config/certs/elasticsearch.pem
          subPath: elasticsearch.pem
        - name: certificates
          mountPath: /usr/share/kibana/config/certs/elasticsearch-key.pem
          subPath: elasticsearch-key.pem
        - name: config
          mountPath: /usr/share/kibana/config/kibana.yml
          subPath: kibana.yml
      volumes:
        - name: certificates
          configMap:
            name: elasticsearch-certificates
        - name: config
          configMap:
            name: kibana-config

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: {{.Namespace}}
  name: elasticsearch
  labels:
    app: elasticsearch
spec:
  serviceName: elasticsearch
  replicas: {{.ElasticsearchCount}} 
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      initContainers:
      - name: setup
        image: "{{.BusyboxImage}}"
        command: 
        - sh
        - -c
        - chown -R 1000:1000 /usr/share/elasticsearch/data && sysctl -w vm.max_map_count=262144 && ulimit -n 65536
        securityContext:
          privileged: true
        volumeMounts:
        - name: data
          mountPath: /usr/share/elasticsearch/data
      containers:
      - name: elasticsearch
        image: "{{.ElasticsearchImage}}"
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - bin/elasticsearch-users useradd $ELASTIC_USERNAME -p $ELASTIC_PASSWORD -r superuser && /bin/tini -- /usr/local/bin/docker-entrypoint.sh eswrapper
        resources:
          limits:
            cpu: 1000m
          requests:
            cpu: 500m
        volumeMounts:
        - name: data
          mountPath: /usr/share/elasticsearch/data
        - name: config
          mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          subPath: elasticsearch.yml
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/certs/ca.pem
          subPath: ca.pem
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/certs/elasticsearch.pem
          subPath: elasticsearch.pem
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/certs/elasticsearch-key.pem
          subPath: elasticsearch-key.pem
        env:
          - name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: ES_JAVA_OPTS
            value: "-Xms512m -Xmx512m"
          - name: ELASTIC_USERNAME
            valueFrom:
              secretKeyRef:
                name: elasticsearch-credentials
                key: username
          - name: ELASTIC_PASSWORD
            valueFrom:
              secretKeyRef:
                name: elasticsearch-credentials
                key: password
        ports:
        - containerPort: 9200
          name: rest
          protocol: TCP
        - containerPort: 9300
          name: inter-node
          protocol: TCP
      volumes:
        - name: certificates
          configMap:
            name: elasticsearch-certificates
        - name: config
          configMap:
            name: elasticsearch-config
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app: elasticsearch
    spec:
      accessModes: 
      - ReadWriteOnce
      resources:
        requests:
          storage: {{.ElasticsearchSize}}Gi

---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: {{.Namespace}}
  name: cerebro
data:
  application.conf: |-
    play {
        server {
            http {
                port = "disabled"
            }

            https {
                port = "9000"
                keyStore = {
                    type = "PKCS12"
                    path = "/tmp/keystore.p12"
                }
            }
        }
    }
    secret = ${?APPLICATION_SECRET}
    hosts = [
        {
            name = "elasticsearch"
            host = "https://elasticsearch:9200"
            auth = {
                username = ${?ELASTICSEARCH_USERNAME}
                password = ${?ELASTICSEARCH_PASSWORD}
            }
        }
    ] 
    auth = {
        type: basic
        settings {
            username = ${?BASIC_AUTH_USER}
            password = ${?BASIC_AUTH_PWD}
        }
    }
    play.ws.ssl {
        trustManager = {
            stores = [
                { type = "PEM", path = "/ca.pem" }
            ]
        }
    }

---
apiVersion: v1
kind: Service
metadata:
  namespace: {{.Namespace}}
  name: cerebro
  labels:
    app: cerebro
spec:
  type: NodePort
  selector:
    app: cerebro
  ports:
  - name: https
    nodePort: {{.CerebroPort}}
    port: 9000
    protocol: TCP
    targetPort: 9000

---
apiVersion: v1
kind: Service
metadata:
  namespace: {{.Namespace}}
  name: kibana
  labels:
    app: kibana
spec:
  selector:
    app: kibana
  type: NodePort
  ports:
  - name: https
    nodePort: {{.KibanaPort}}
    port: 5601
    protocol: TCP
    targetPort: 5601

---
kind: Service
apiVersion: v1
metadata:
  namespace: {{.Namespace}}
  name: elasticsearch
  labels:
    app: elasticsearch
spec:
  selector:
    app: elasticsearch
  ports:
    - port: 9200
      name: rest
      protocol: TCP
    - port: 9300
      name: inter-node
      protocol: TCP
