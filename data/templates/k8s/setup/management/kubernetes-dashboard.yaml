apiVersion: v1
kind: Secret
metadata:
  namespace: {{.Namespace}}
  name: kubernetes-dashboard-csrf
  labels:
    k8s-app: kubernetes-dashboard
type: Opaque
data:
  csrf: ""

---
apiVersion: v1
kind: Secret
metadata:
  namespace: {{.Namespace}}
  name: kubernetes-dashboard-key-holder
  labels:
    k8s-app: kubernetes-dashboard
type: Opaque

---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: {{.Namespace}}
  name: kubernetes-dashboard
  labels:
    k8s-app: kubernetes-dashboard

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: {{.Namespace}}
  name: kubernetes-dashboard
  labels:
    k8s-app: kubernetes-dashboard
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["kubernetes-dashboard-key-holder",  "kubernetes-dashboard-csrf"]
    verbs: ["get", "update", "delete"]
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["kubernetes-dashboard-settings"]
    verbs: ["get", "update"]
  - apiGroups: [""]
    resources: ["services"]
    resourceNames: ["heapster", "dashboard-metrics-scraper"]
    verbs: ["proxy"]
  - apiGroups: [""]
    resources: ["services/proxy"]
    resourceNames: ["heapster", "http:heapster:", "https:heapster:", "dashboard-metrics-scraper", "http:dashboard-metrics-scraper"]
    verbs: ["get"]

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubernetes-dashboard
  labels:
    k8s-app: kubernetes-dashboard
rules:
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods", "nodes"]
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: {{.Namespace}}
  name: kubernetes-dashboard
  labels:
    k8s-app: kubernetes-dashboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubernetes-dashboard
subjects:
  - kind: ServiceAccount
    namespace: {{.Namespace}}
    name: kubernetes-dashboard

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubernetes-dashboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubernetes-dashboard
subjects:
  - kind: ServiceAccount
    namespace: {{.Namespace}}
    name: kubernetes-dashboard

---
apiVersion: v1
kind: Service
metadata:
  namespace: {{.Namespace}}
  name: kubernetes-dashboard
  labels:
    k8s-app: kubernetes-dashboard
spec:
  type: NodePort
  ports:
    - port: 443
      targetPort: 8443
      nodePort: {{.KubernetesDashboardPort}}
      protocol: TCP
  selector:
    k8s-app: kubernetes-dashboard

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{.Namespace}}
  name: kubernetes-dashboard
  labels:
    k8s-app: kubernetes-dashboard
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: kubernetes-dashboard
  template:
    metadata:
      labels:
        k8s-app: kubernetes-dashboard
    spec:
      containers:
        - name: kubernetes-dashboard
          image: "{{.KubernetesDashboardImage}}"
          ports:
            - containerPort: 8443
              protocol: TCP
          args:
          - --tls-cert-file 
          - kubernetes-dashboard.pem
          - --tls-key-file 
          - kubernetes-dashboard-key.pem
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
            - name: certificates
              mountPath: /etc/ssl/certs/ca.pem
              subPath: ca.pem
            - name: certificates
              mountPath: /certs/kubernetes-dashboard.pem
              subPath: kubernetes-dashboard.pem
            - name: certificates
              mountPath: /certs/kubernetes-dashboard-key.pem
              subPath: kubernetes-dashboard-key.pem
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /
              port: 8443
            initialDelaySeconds: 30
            timeoutSeconds: 30
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 1001
            runAsGroup: 2001
      volumes:
        - name: certificates
          configMap:
            name: kubernetes-dashboard-certificates
        - name: tmp-volume
          emptyDir: {}
      serviceAccountName: kubernetes-dashboard

---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: {{.Namespace}}
  name: kubernetes-dashboard-settings
  labels:
    k8s-app: kubernetes-dashboard
data:
  _global: '{"clusterName":"{{.ClusterName}}","itemsPerPage":50,"labelsLimit":0,"logsAutoRefreshTimeInterval":2,"resourceAutoRefreshTimeInterval":5,"disableAccessDeniedNotifications":false}'

---
kind: Service
apiVersion: v1
metadata:
  namespace: {{.Namespace}}
  name: dashboard-metrics-scraper
  labels:
    k8s-app: dashboard-metrics-scraper
spec:
  ports:
    - port: 8000
      targetPort: 8000
      protocol: TCP
  selector:
    k8s-app: dashboard-metrics-scraper

---
kind: Deployment
apiVersion: apps/v1
metadata:
  namespace: {{.Namespace}}
  name: dashboard-metrics-scraper
  labels:
    k8s-app: dashboard-metrics-scraper
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: dashboard-metrics-scraper
  template:
    metadata:
      labels:
        k8s-app: dashboard-metrics-scraper
    spec:
      containers:
        - name: dashboard-metrics-scraper
          image: {{ .MetricsScraperImage }}
          ports:
            - containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /
              port: 8000
            initialDelaySeconds: 30
            timeoutSeconds: 30
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 1001
            runAsGroup: 2001
      serviceAccountName: kubernetes-dashboard
      volumes:
        - name: tmp-volume
          emptyDir: {}

---
apiVersion: v1
kind: Secret
metadata:
  name: admin-user-token-0
  namespace: kube-system
  annotations:
    kubernetes.io/service-account.name: admin-user
type: kubernetes.io/service-account-token
